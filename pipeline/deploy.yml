trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: runTerraformDeployment
  type: boolean
  default: false
  displayName: 'Run Terraform'
- name: runCheckov
  type: boolean
  default: false
  displayName: 'Run Checkov'

variables:
  - group: "{your-variables}"

## reference: https://www.mediaglasses.blog/2021/06/08/azure-devops-terraform-pipeline-with-checkov-approvals/

stages:
- ${{ if parameters.runCheckov }}:
  - stage: "Checkov"
    jobs:
    - job: "runCheckov"
      displayName: "Checkov > Pull, run and publish results of Checkov scan"
      steps:
        - bash: |
            docker pull bridgecrew/checkov
          workingDirectory: $(System.DefaultWorkingDirectory)
          displayName: "Pull > bridgecrew/checkov"

        - bash: |
            docker run --volume $(pwd):/tf bridgecrew/checkov --directory /tf --output junitxml --soft-fail > $(pwd)/CheckovReport.xml
          workingDirectory: $(System.DefaultWorkingDirectory)
          displayName: "Run > checkov"

        - task: PublishTestResults@2
          inputs:
            testRunTitle: "Checkov Results"
            failTaskOnFailedTests: false
            testResultsFormat: "JUnit"
            testResultsFiles: "CheckovReport.xml"
            searchFolder: "$(System.DefaultWorkingDirectory)"
          displayName: "Publish > Checkov scan results"

- ${{ if parameters.runTerraformDeployment }}:
  - stage: "validateTerraform"
    displayName: "Terraform - Validate"
    dependsOn:
      - "runCheckov"
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init and validate"
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SUBSCRIPTION_NAME)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_environment)-$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tz_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "validate"
              environmentServiceName: "$(SUBSCRIPTION_NAME)"
            displayName: "Run > terraform validate"
  
  - stage: "planTerraform"
    displayName: "Terraform - Plan"
    dependsOn:
      - "validateTerraform"
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init & plan"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SUBSCRIPTION_NAME)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_environment)-$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tz_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "plan"
              environmentServiceName: "$(SUBSCRIPTION_NAME)"
              publishPlanResults: "PlanResults"
              commandOptions: "-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode"
            name: "plan"
            displayName: "Run > terraform plan"

          - task: Bash@3
            name: AutoApprovalTest
            displayName: Auto-Approval Test
            inputs:
              targetType: 'inline'
              workingDirectory: '$(tf_dir)'
              failOnStderr: true
              script: |
                # If no changes, no-op and don't continue
                if terraform show terraform.tfplan | grep -q "No changes"; then 
                  echo "##[section]i - No changes, terraform apply will not run";
                  echo "##vso[task.setvariable variable=hasChanges;isOutput=true]false"
                  echo "##vso[task.setvariable variable=approvalRequired;isOutput=true]false"
                # Check if resources destroyed. If no, don't require approval
                elif terraform show terraform.tfplan | grep -q "0 to destroy"; then 
                  echo "##[section]👍 - Approval not required";
                  echo "##[section]Automatic terraform apply triggered";
                  echo "##vso[task.setvariable variable=approvalRequired;isOutput=true]false"
                  echo "##vso[task.setvariable variable=hasChanges;isOutput=true]true"
                # Check if resources destroyed. If yes, require approvals
                else 
                  echo "##[section]⛔️ - Terraform apply requires manual approval";
                  echo "##vso[task.setvariable variable=approvalRequired;isOutput=true]true"
                  echo "##vso[task.setvariable variable=hasChanges;isOutput=true]true"
                fi

  - stage: "autoTerraform"
    displayName: "Terraform - Auto Approval"
    dependsOn:
      - "planTerraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.planTerraform.outputs['TerraformJobs.AutoApprovalTest.approvalRequired'], 'false'),
          eq(dependencies.planTerraform.outputs['TerraformJobs.AutoApprovalTest.hasChanges'], 'true')
        )   
    jobs:
      - job: "TerraformAuto"
        displayName: "Terraform > install, init & apply"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SUBSCRIPTION_NAME)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_environment)-$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tz_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "apply"
              environmentServiceName: "$(SUBSCRIPTION_NAME)"
            displayName: "Run > terraform apply"

  - stage: "approveTerraform"
    displayName: "Terraform - Manual Approval"
    dependsOn:
      - "planTerraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.planTerraform.outputs['TerraformJobs.AutoApprovalTest.approvalRequired'], 'true'),
          eq(dependencies.planTerraform.outputs['TerraformJobs.AutoApprovalTest.hasChanges'], 'true')
        )     
    jobs:
      - job: "waitForValidation"
        displayName: "Wait > Wait for manual appoval"
        pool: "server"
        timeoutInMinutes: "4320" # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: "1440" # task times out in 1 day
            inputs:
              notifyUsers: |
                azure@mckendrick.io
              instructions: "There are resources being destroyed or the costs are increasing alot as part of this deployment, please review the output of Terraform plan before approving."
              onTimeout: "reject"

      - job: "TerraformApprove"
        displayName: "Terraform > install, init & apply"
        dependsOn: "waitForValidation"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SUBSCRIPTION_NAME)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_environment)-$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tz_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "apply"
              environmentServiceName: "$(SUBSCRIPTION_NAME)"
            displayName: "Run > terraform apply"

- stage: "Deploy App"
  displayName: "Deploy App"
  dependsOn: "Deploy Infrastructure"
  jobs:
    - job: "deployApp"
      displayName: "Deploy App"
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download artifact'
          inputs:
            artifactName: 'drop'
            path: $(Pipeline.Workspace)/drop

        - task: DotNetCoreCLI@2
          displayName: 'Publish application'
          inputs:
            command: 'publish'
            publishWebProjects: true
            projects: '**/*.csproj'
            arguments: '--configuration Release --output $(build.artifactstagingdirectory)'
            zipAfterPublish: true

        - task: AzureRmWebAppDeployment@4
          displayName: 'Deploy to Azure App Service'
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: "$(SUBSCRIPTION_NAME)"
            appType: 'webAppLinux'
            WebAppName: "$(appName)"
            packageForLinux: '$(Pipeline.Workspace)/drop/**/*.zip'